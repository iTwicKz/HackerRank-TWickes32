import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner input = new Scanner(System.in);
        int rows = input.nextInt();
        int columns = input.nextInt();
        
        int[][] mat = new int[rows][columns];
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < columns; j++){
                mat[i][j] = input.nextInt();
            }
        }
    
        int[][] hitMap = new int[rows][columns];
        
        for(int k = 0; k < rows; k++){
            for(int l = 0; l < columns; l++){
                hitMap[k][l] = 0;
            }
        }
        
        int count = 0;
        boolean hit = false;
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < columns; j++){
                if(mat[i][j] == 1){
                    if(adTB(mat, i, j) || adLR(mat, i, j) || adDD(mat, i, j)){
                        if(adTB(hitMap, i, j) || adLR(hitMap, i, j) || adDD(hitMap, i, j) || !hit){
                            hit = true;
                            count++;
                            hitMap[i][j] = 1;
                        }
                     }
                }
            }
        }
        
        System.out.println(count);
    }
    
    static boolean adTB(int[][] mat, int i, int j){
        if(i == 0){
            if(mat[i + 1][j] == 1) return true;
            else return false;
        }
        if(i == mat.length){
            if(mat[i - 1][j] == 1) return true;
            else return false;
        }
        if(mat[i + 1][j] == 1 || mat[i - 1][j] == 1){
            return true;
        }
        return false;
    }
    
    static boolean adLR(int[][] mat, int i, int j){
        if(j == 0){
            if(mat[i][j + 1] == 1) return true;
            else return false;
        }
        if(j == mat[0].length){
            if(mat[i][j - 1] == 1) return true;
            else return false;
        }
        if(mat[i][j + 1] == 1 || mat[i][j - 1] == 1){
            return true;
        }
        return false;
    }
    
    static boolean adDD(int[][] mat, int i, int j){
        if(i == 0 && j == 0){
            if(mat[i + 1][j + 1] == 1) return true;
            else return false;
        }
        if(i == 0 && j == mat[0].length){
            if(mat[i + 1][j - 1] == 1) return true;
            else return false;
        }
        if(i == mat.length && j == mat[0].length){
            if(mat[i - 1][j - 1] == 1) return true;
            else return false;
        }
        if(i == mat.length && j == 0){
            if(mat[i - 1][j + 1] == 1) return true;
            else return false;
        }
        if(i == 0){
            if(mat[i + 1][j + 1] == 1) return true;
            if(mat[i + 1][j - 1] == 1) return true;
            else return false;
        }
        if(i == mat.length){
            if(mat[i - 1][j + 1] == 1) return true;
            if(mat[i - 1][j - 1] == 1) return true;
            else return false;
        }
        if(j == 0){
            if(mat[i + 1][j + 1] == 1) return true;
            if(mat[i - 1][j + 1] == 1) return true;
            else return false;
        }
        if(j == mat[0].length){
            if(mat[i + 1][j - 1] == 1) return true;
            if(mat[i - 1][j - 1] == 1) return true;
            else return false;
        }
        
       if(mat[i + 1][j + 1] == 1) return true;
       if(mat[i - 1][j - 1] == 1) return true;
       if(mat[i - 1][j + 1] == 1) return true;
       if(mat[i + 1][j - 1] == 1) return true;
       return false;
    }
}
